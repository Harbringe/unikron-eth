/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  WorkingMultiDex,
  WorkingMultiDexInterface,
} from "../../contracts/WorkingMultiDex";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "EnforcedPause",
    type: "error",
  },
  {
    inputs: [],
    name: "ExpectedPause",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "dexActive",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "dexPriority",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "dexRouters",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    name: "getAllQuotes",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "dexName",
            type: "string",
          },
          {
            internalType: "address",
            name: "router",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gasEstimate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slippage",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isActive",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "priority",
            type: "uint256",
          },
        ],
        internalType: "struct WorkingMultiDex.DexQuote[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    name: "getBestQuote",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "dexName",
            type: "string",
          },
          {
            internalType: "address",
            name: "router",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gasEstimate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slippage",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isActive",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "priority",
            type: "uint256",
          },
        ],
        internalType: "struct WorkingMultiDex.DexQuote",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSupportedDexs",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "isDexActive",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "bool",
        name: "active",
        type: "bool",
      },
    ],
    name: "setDexActive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "supportedDexs",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6009610120818152682ab734b9bbb0b82b1960b91b6101405260809081526101608281526805375736869537761760bc1b6101805260a0526101a091825268556e6973776170563360b81b6101c05260c09190915260056101e081815264437572766560d81b6102005260e0526102606040526008610220908152672130b630b731b2b960c11b61024052610100526200009c91600291620004f3565b50348015620000aa57600080fd5b5060016000553380620000d757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b620000e28162000499565b50737a250d5630b4cf539739df2c5dacb4c659f2488d60036040516200011790682ab734b9bbb0b82b1960b91b815260090190565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b0319909316929092179091556805375736869537761760bc1b815273d9e1ce17f2641f24ae83637ab66a2cca9c378b9f9060039060090190815260405190819003602001812080546001600160a01b03939093166001600160a01b03199093169290921790915568556e6973776170563360b81b815273e592427a0aece92de3edee1f18e0157c058615649060039060090190815260405190819003602001812080546001600160a01b03939093166001600160a01b03199093169290921790915564437572766560d81b81527399a58482bd75cbab83b27ec03ca68ff489b5788f9060039060050190815260405190819003602001812080546001600160a01b03939093166001600160a01b031990931692909217909155672130b630b731b2b960c11b815273e592427a0aece92de3edee1f18e0157c058615649060039060080190815260405190819003602001812080546001600160a01b03939093166001600160a01b031990931692909217909155682ab734b9bbb0b82b1960b91b8152600190600490600901908152604051908190036020018120805492151560ff19909316929092179091556805375736869537761760bc1b8152600190600490600901908152604051908190036020018120805492151560ff199093169290921790915568556e6973776170563360b81b8152600190600490600901908152604051908190036020018120805492151560ff199093169290921790915564437572766560d81b8152600190600490600501908152604051908190036020018120805492151560ff1990931692909217909155672130b630b731b2b960c11b8152600190600490600801908152604051908190036020018120805492151560ff1990931692909217909155682ab734b9bbb0b82b1960b91b8152600190600590600901908152604051908190036020018120919091556805375736869537761760bc1b81526002906005906009019081526040519081900360200181209190915568556e6973776170563360b81b81526003906005906009019081526040519081900360200181209190915564437572766560d81b8152600490600590810190815260405190819003602001812091909155672130b630b731b2b960c11b81526005908190600801908152604051908190036020019020556200073b565b600180546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280548282559060005260206000209081019282156200053e579160200282015b828111156200053e57825182906200052d90826200066f565b509160200191906001019062000514565b506200054c92915062000550565b5090565b808211156200054c57600062000567828262000571565b5060010162000550565b5080546200057f90620005e0565b6000825580601f1062000590575050565b601f016020900490600052602060002090810190620005b09190620005b3565b50565b5b808211156200054c5760008155600101620005b4565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620005f557607f821691505b6020821081036200061657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200066a57600081815260208120601f850160051c81016020861015620006455750805b601f850160051c820191505b81811015620006665782815560010162000651565b5050505b505050565b81516001600160401b038111156200068b576200068b620005ca565b620006a3816200069c8454620005e0565b846200061c565b602080601f831160018114620006db5760008415620006c25750858301515b600019600386901b1c1916600185901b17855562000666565b600085815260208120601f198616915b828110156200070c57888601518255948401946001909101908401620006eb565b50858210156200072b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b611312806200074b6000396000f3fe6080604052600436106100ec5760003560e01c80635c975abb1161008a5780638da5cb5b116100595780638da5cb5b146102c7578063bb75a1d3146102ea578063f2fde38b14610330578063f921060e1461035057600080fd5b80635c975abb1461022c5780635e7ffa6714610244578063715018a61461029d5780638456cb59146102b257600080fd5b80632e4e8438116100c65780632e4e8438146101a65780633713029a146101d35780633f4ba83a146101f5578063566eabd41461020c57600080fd5b806301450ee1146100f8578063228c04b81461012e578063274ae86b1461015b57600080fd5b366100f357005b600080fd5b34801561010457600080fd5b50610118610113366004610ea4565b610370565b6040516101259190610f0d565b60405180910390f35b34801561013a57600080fd5b5061014e610149366004610f43565b61041c565b6040516101259190610fe6565b34801561016757600080fd5b5061019661017636600461109c565b805160208183018101805160048252928201919093012091525460ff1681565b6040519015158152602001610125565b3480156101b257600080fd5b506101c66101c1366004610f43565b61067a565b60405161012591906110d9565b3480156101df57600080fd5b506101e86108cd565b604051610125919061113b565b34801561020157600080fd5b5061020a6109a6565b005b34801561021857600080fd5b5061020a610227366004611190565b6109b8565b34801561023857600080fd5b5060015460ff16610196565b34801561025057600080fd5b5061028561025f36600461109c565b80516020818301810180516003825292820191909301209152546001600160a01b031681565b6040516001600160a01b039091168152602001610125565b3480156102a957600080fd5b5061020a6109f5565b3480156102be57600080fd5b5061020a610a07565b3480156102d357600080fd5b5060015461010090046001600160a01b0316610285565b3480156102f657600080fd5b5061032261030536600461109c565b805160208183018101805160058252928201919093012091525481565b604051908152602001610125565b34801561033c57600080fd5b5061020a61034b3660046111e7565b610a17565b34801561035c57600080fd5b5061019661036b36600461109c565b610a55565b6002818154811061038057600080fd5b90600052602060002001600091509050805461039b90611202565b80601f01602080910402602001604051908101604052809291908181526020018280546103c790611202565b80156104145780601f106103e957610100808354040283529160200191610414565b820191906000526020600020905b8154815290600101906020018083116103f757829003601f168201915b505050505081565b610424610e5c565b6000821161046a5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b60448201526064015b60405180910390fd5b610472610e5c565b6000805b600254811015610632576000600282815481106104955761049561123c565b9060005260206000200180546104aa90611202565b80601f01602080910402602001604051908101604052809291908181526020018280546104d690611202565b80156105235780601f106104f857610100808354040283529160200191610523565b820191906000526020600020905b81548152906001019060200180831161050657829003601f168201915b5050505050905060048160405161053a9190611252565b9081526040519081900360200190205460ff161561061f576000806000610561848a610a80565b92509250925060006040518060e0016040528086815260200160038760405161058a9190611252565b908152602001604051809103902060009054906101000a90046001600160a01b03166001600160a01b031681526020018581526020018481526020018381526020016001151581526020016005876040516105e59190611252565b908152602001604051809103902054815250905086158061060d575087604001518160400151115b1561061a57809750600196505b505050505b508061062a81611284565b915050610476565b50806106715760405162461bcd60e51b815260206004820152600e60248201526d4e6f20616374697665204445587360901b6044820152606401610461565b50949350505050565b6060600082116106bd5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610461565b60025460009067ffffffffffffffff8111156106db576106db610ff9565b60405190808252806020026020018201604052801561071457816020015b610701610e5c565b8152602001906001900390816106f95790505b50905060005b600254811015610671576000600282815481106107395761073961123c565b90600052602060002001805461074e90611202565b80601f016020809104026020016040519081016040528092919081815260200182805461077a90611202565b80156107c75780601f1061079c576101008083540402835291602001916107c7565b820191906000526020600020905b8154815290600101906020018083116107aa57829003601f168201915b505050505090506004816040516107de9190611252565b9081526040519081900360200190205460ff16156108ba5760008060006108058489610a80565b9250925092506040518060e0016040528085815260200160038660405161082c9190611252565b908152602001604051809103902060009054906101000a90046001600160a01b03166001600160a01b031681526020018481526020018381526020018281526020016001151581526020016005866040516108879190611252565b9081526020016040518091039020548152508686815181106108ab576108ab61123c565b60200260200101819052505050505b50806108c581611284565b91505061071a565b60606002805480602002602001604051908101604052809291908181526020016000905b8282101561099d57838290600052602060002001805461091090611202565b80601f016020809104026020016040519081016040528092919081815260200182805461093c90611202565b80156109895780601f1061095e57610100808354040283529160200191610989565b820191906000526020600020905b81548152906001019060200180831161096c57829003601f168201915b5050505050815260200190600101906108f1565b50505050905090565b6109ae610cfb565b6109b6610d2e565b565b6109c0610cfb565b806004836040516109d19190611252565b908152604051908190036020019020805491151560ff199092169190911790555050565b6109fd610cfb565b6109b66000610d80565b610a0f610cfb565b6109b6610dda565b610a1f610cfb565b6001600160a01b038116610a4957604051631e4fbdf760e01b815260006004820152602401610461565b610a5281610d80565b50565b6000600482604051610a679190611252565b9081526040519081900360200190205460ff1692915050565b6040805180820190915260098152682ab734b9bbb0b82b1960b91b602091820152825190830120600090819081907f54d9ad28f516272003a8cb2dbd9c515b4c2dd5819e83623e74e20e093744778401610afd576064610ae185606061129d565b610aeb91906112ba565b9250620249f091506101909050610cf4565b60408051808201909152600981526805375736869537761760bc1b6020918201528551908601207f9fd79529140912d426f996f8fd17d8c0a099cdcaf4ca5aa0192bebad6312b38401610b73576064610b5785605f61129d565b610b6191906112ba565b92506202710091506101f49050610cf4565b604080518082019091526009815268556e6973776170563360b81b6020918201528551908601207f55bbc5b76385ab5ce5da1b40da3183baf1ebe0027a4440c291328a6fcf83bae701610be9576064610bcd85606161129d565b610bd791906112ba565b925062030d40915061012c9050610cf4565b604080518082019091526005815264437572766560d81b6020918201528551908601207fb41fbc53f8d9d9a3e2554b031e110cde08304beb0d6aef8f1c8ae28628b05f1d01610c5a576064610c3f85606261129d565b610c4991906112ba565b92506202bf20915060c89050610cf4565b6040805180820190915260088152672130b630b731b2b960c11b6020918201528551908601207ff7f53f66846af2ad3f241c2f641949f42bf8ca68233eee9dc73521512229d6c101610ccf576064610cb385606061129d565b610cbd91906112ba565b925062035b6091506101909050610cf4565b6064610cdc85605f61129d565b610ce691906112ba565b925062030d4091506101f490505b9250925092565b6001546001600160a01b036101009091041633146109b65760405163118cdaa760e01b8152336004820152602401610461565b610d36610e15565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600180546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610de2610e38565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833610d63565b60015460ff166109b657604051638dfc202b60e01b815260040160405180910390fd5b60015460ff16156109b65760405163d93c066560e01b815260040160405180910390fd5b6040518060e001604052806060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600015158152602001600081525090565b600060208284031215610eb657600080fd5b5035919050565b60005b83811015610ed8578181015183820152602001610ec0565b50506000910152565b60008151808452610ef9816020860160208601610ebd565b601f01601f19169290920160200192915050565b602081526000610f206020830184610ee1565b9392505050565b80356001600160a01b0381168114610f3e57600080fd5b919050565b600080600060608486031215610f5857600080fd5b610f6184610f27565b9250610f6f60208501610f27565b9150604084013590509250925092565b6000815160e08452610f9460e0850182610ee1565b905060018060a01b03602084015116602085015260408301516040850152606083015160608501526080830151608085015260a0830151151560a085015260c083015160c08501528091505092915050565b602081526000610f206020830184610f7f565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261102057600080fd5b813567ffffffffffffffff8082111561103b5761103b610ff9565b604051601f8301601f19908116603f0116810190828211818310171561106357611063610ff9565b8160405283815286602085880101111561107c57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156110ae57600080fd5b813567ffffffffffffffff8111156110c557600080fd5b6110d18482850161100f565b949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561112e57603f1988860301845261111c858351610f7f565b94509285019290850190600101611100565b5092979650505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561112e57603f1988860301845261117e858351610ee1565b94509285019290850190600101611162565b600080604083850312156111a357600080fd5b823567ffffffffffffffff8111156111ba57600080fd5b6111c68582860161100f565b925050602083013580151581146111dc57600080fd5b809150509250929050565b6000602082840312156111f957600080fd5b610f2082610f27565b600181811c9082168061121657607f821691505b60208210810361123657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60008251611264818460208701610ebd565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b6000600182016112965761129661126e565b5060010190565b80820281158282048414176112b4576112b461126e565b92915050565b6000826112d757634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122060bc452ec36227ab4294ef978268a5c02ca9b2003a4bec1b6735584eeb3585b964736f6c63430008140033";

type WorkingMultiDexConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WorkingMultiDexConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WorkingMultiDex__factory extends ContractFactory {
  constructor(...args: WorkingMultiDexConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      WorkingMultiDex & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): WorkingMultiDex__factory {
    return super.connect(runner) as WorkingMultiDex__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WorkingMultiDexInterface {
    return new Interface(_abi) as WorkingMultiDexInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): WorkingMultiDex {
    return new Contract(address, _abi, runner) as unknown as WorkingMultiDex;
  }
}
