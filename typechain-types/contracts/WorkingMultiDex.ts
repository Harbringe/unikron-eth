/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace WorkingMultiDex {
  export type DexQuoteStruct = {
    dexName: string;
    router: AddressLike;
    amountOut: BigNumberish;
    gasEstimate: BigNumberish;
    slippage: BigNumberish;
    isActive: boolean;
    priority: BigNumberish;
  };

  export type DexQuoteStructOutput = [
    dexName: string,
    router: string,
    amountOut: bigint,
    gasEstimate: bigint,
    slippage: bigint,
    isActive: boolean,
    priority: bigint
  ] & {
    dexName: string;
    router: string;
    amountOut: bigint;
    gasEstimate: bigint;
    slippage: bigint;
    isActive: boolean;
    priority: bigint;
  };
}

export interface WorkingMultiDexInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "dexActive"
      | "dexPriority"
      | "dexRouters"
      | "getAllQuotes"
      | "getBestQuote"
      | "getSupportedDexs"
      | "isDexActive"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "setDexActive"
      | "supportedDexs"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred" | "Paused" | "Unpaused"
  ): EventFragment;

  encodeFunctionData(functionFragment: "dexActive", values: [string]): string;
  encodeFunctionData(functionFragment: "dexPriority", values: [string]): string;
  encodeFunctionData(functionFragment: "dexRouters", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAllQuotes",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBestQuote",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedDexs",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isDexActive", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDexActive",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedDexs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "dexActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dexPriority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dexRouters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllQuotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBestQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedDexs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDexActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDexActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedDexs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WorkingMultiDex extends BaseContract {
  connect(runner?: ContractRunner | null): WorkingMultiDex;
  waitForDeployment(): Promise<this>;

  interface: WorkingMultiDexInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  dexActive: TypedContractMethod<[arg0: string], [boolean], "view">;

  dexPriority: TypedContractMethod<[arg0: string], [bigint], "view">;

  dexRouters: TypedContractMethod<[arg0: string], [string], "view">;

  getAllQuotes: TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, amountIn: BigNumberish],
    [WorkingMultiDex.DexQuoteStructOutput[]],
    "view"
  >;

  getBestQuote: TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, amountIn: BigNumberish],
    [WorkingMultiDex.DexQuoteStructOutput],
    "view"
  >;

  getSupportedDexs: TypedContractMethod<[], [string[]], "view">;

  isDexActive: TypedContractMethod<[name: string], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setDexActive: TypedContractMethod<
    [name: string, active: boolean],
    [void],
    "nonpayable"
  >;

  supportedDexs: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "dexActive"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "dexPriority"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "dexRouters"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "getAllQuotes"
  ): TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, amountIn: BigNumberish],
    [WorkingMultiDex.DexQuoteStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBestQuote"
  ): TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, amountIn: BigNumberish],
    [WorkingMultiDex.DexQuoteStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSupportedDexs"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "isDexActive"
  ): TypedContractMethod<[name: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDexActive"
  ): TypedContractMethod<[name: string, active: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportedDexs"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
