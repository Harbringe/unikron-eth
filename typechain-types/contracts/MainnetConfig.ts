/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MainnetConfigInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAINNET_DEPLOYMENT"
      | "MAINNET_UNISWAP_V2_ROUTER"
      | "MAINNET_UNISWAP_V3_ROUTER"
      | "MAINNET_WETH"
      | "SEPOLIA_UNISWAP_V2_ROUTER"
      | "SEPOLIA_UNISWAP_V3_ROUTER"
      | "SEPOLIA_WETH"
      | "getUniswapV2Router"
      | "getUniswapV3Router"
      | "getWethAddress"
      | "isMainnet"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAINNET_DEPLOYMENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAINNET_UNISWAP_V2_ROUTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAINNET_UNISWAP_V3_ROUTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAINNET_WETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SEPOLIA_UNISWAP_V2_ROUTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SEPOLIA_UNISWAP_V3_ROUTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SEPOLIA_WETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapV3Router",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWethAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isMainnet", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MAINNET_DEPLOYMENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAINNET_UNISWAP_V2_ROUTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAINNET_UNISWAP_V3_ROUTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAINNET_WETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SEPOLIA_UNISWAP_V2_ROUTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SEPOLIA_UNISWAP_V3_ROUTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SEPOLIA_WETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapV3Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWethAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMainnet", data: BytesLike): Result;
}

export interface MainnetConfig extends BaseContract {
  connect(runner?: ContractRunner | null): MainnetConfig;
  waitForDeployment(): Promise<this>;

  interface: MainnetConfigInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAINNET_DEPLOYMENT: TypedContractMethod<[], [boolean], "view">;

  MAINNET_UNISWAP_V2_ROUTER: TypedContractMethod<[], [string], "view">;

  MAINNET_UNISWAP_V3_ROUTER: TypedContractMethod<[], [string], "view">;

  MAINNET_WETH: TypedContractMethod<[], [string], "view">;

  SEPOLIA_UNISWAP_V2_ROUTER: TypedContractMethod<[], [string], "view">;

  SEPOLIA_UNISWAP_V3_ROUTER: TypedContractMethod<[], [string], "view">;

  SEPOLIA_WETH: TypedContractMethod<[], [string], "view">;

  getUniswapV2Router: TypedContractMethod<[], [string], "view">;

  getUniswapV3Router: TypedContractMethod<[], [string], "view">;

  getWethAddress: TypedContractMethod<[], [string], "view">;

  isMainnet: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAINNET_DEPLOYMENT"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "MAINNET_UNISWAP_V2_ROUTER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAINNET_UNISWAP_V3_ROUTER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAINNET_WETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SEPOLIA_UNISWAP_V2_ROUTER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SEPOLIA_UNISWAP_V3_ROUTER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SEPOLIA_WETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getUniswapV2Router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getUniswapV3Router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getWethAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isMainnet"
  ): TypedContractMethod<[], [boolean], "view">;

  filters: {};
}
