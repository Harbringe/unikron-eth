/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface RealDexIntegrationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "executeUniswapV2Swap"
      | "executeUniswapV3Swap"
      | "getBestQuote"
      | "getUniswapV2Quote"
      | "getUniswapV3Quote"
      | "networkConfig"
      | "owner"
      | "renounceOwnership"
      | "rescueETH"
      | "rescueTokens"
      | "transferOwnership"
      | "updateNetworkConfig"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DEXQuoteReceived"
      | "OwnershipTransferred"
      | "SwapExecuted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "executeUniswapV2Swap",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeUniswapV3Swap",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBestQuote",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapV2Quote",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapV3Quote",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "networkConfig",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueETH",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueTokens",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNetworkConfig",
    values: [AddressLike, AddressLike, AddressLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeUniswapV2Swap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeUniswapV3Swap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBestQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapV2Quote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapV3Quote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "networkConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rescueETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rescueTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNetworkConfig",
    data: BytesLike
  ): Result;
}

export namespace DEXQuoteReceivedEvent {
  export type InputTuple = [
    tokenIn: AddressLike,
    tokenOut: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish,
    dexName: string,
    gasEstimate: BigNumberish
  ];
  export type OutputTuple = [
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint,
    amountOut: bigint,
    dexName: string,
    gasEstimate: bigint
  ];
  export interface OutputObject {
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    amountOut: bigint;
    dexName: string;
    gasEstimate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapExecutedEvent {
  export type InputTuple = [
    tokenIn: AddressLike,
    tokenOut: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish,
    dexName: string,
    user: AddressLike
  ];
  export type OutputTuple = [
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint,
    amountOut: bigint,
    dexName: string,
    user: string
  ];
  export interface OutputObject {
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    amountOut: bigint;
    dexName: string;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RealDexIntegration extends BaseContract {
  connect(runner?: ContractRunner | null): RealDexIntegration;
  waitForDeployment(): Promise<this>;

  interface: RealDexIntegrationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  executeUniswapV2Swap: TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      recipient: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  executeUniswapV3Swap: TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      recipient: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  getBestQuote: TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, amountIn: BigNumberish],
    [
      [string, bigint, bigint] & {
        bestDex: string;
        bestAmountOut: bigint;
        gasEstimate: bigint;
      }
    ],
    "view"
  >;

  getUniswapV2Quote: TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, amountIn: BigNumberish],
    [[bigint, bigint] & { amountOut: bigint; gasEstimate: bigint }],
    "view"
  >;

  getUniswapV3Quote: TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, amountIn: BigNumberish],
    [[bigint, bigint] & { amountOut: bigint; gasEstimate: bigint }],
    "view"
  >;

  networkConfig: TypedContractMethod<
    [],
    [
      [string, string, string, boolean] & {
        uniswapV2Router: string;
        uniswapV3Router: string;
        wethAddress: string;
        isMainnet: boolean;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rescueETH: TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  rescueTokens: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateNetworkConfig: TypedContractMethod<
    [
      _uniswapV2Router: AddressLike,
      _uniswapV3Router: AddressLike,
      _wethAddress: AddressLike,
      _isMainnet: boolean
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "executeUniswapV2Swap"
  ): TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      recipient: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeUniswapV3Swap"
  ): TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      recipient: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBestQuote"
  ): TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, amountIn: BigNumberish],
    [
      [string, bigint, bigint] & {
        bestDex: string;
        bestAmountOut: bigint;
        gasEstimate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUniswapV2Quote"
  ): TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, amountIn: BigNumberish],
    [[bigint, bigint] & { amountOut: bigint; gasEstimate: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUniswapV3Quote"
  ): TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, amountIn: BigNumberish],
    [[bigint, bigint] & { amountOut: bigint; gasEstimate: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "networkConfig"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, boolean] & {
        uniswapV2Router: string;
        uniswapV3Router: string;
        wethAddress: string;
        isMainnet: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rescueETH"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rescueTokens"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateNetworkConfig"
  ): TypedContractMethod<
    [
      _uniswapV2Router: AddressLike,
      _uniswapV3Router: AddressLike,
      _wethAddress: AddressLike,
      _isMainnet: boolean
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DEXQuoteReceived"
  ): TypedContractEvent<
    DEXQuoteReceivedEvent.InputTuple,
    DEXQuoteReceivedEvent.OutputTuple,
    DEXQuoteReceivedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SwapExecuted"
  ): TypedContractEvent<
    SwapExecutedEvent.InputTuple,
    SwapExecutedEvent.OutputTuple,
    SwapExecutedEvent.OutputObject
  >;

  filters: {
    "DEXQuoteReceived(address,address,uint256,uint256,string,uint256)": TypedContractEvent<
      DEXQuoteReceivedEvent.InputTuple,
      DEXQuoteReceivedEvent.OutputTuple,
      DEXQuoteReceivedEvent.OutputObject
    >;
    DEXQuoteReceived: TypedContractEvent<
      DEXQuoteReceivedEvent.InputTuple,
      DEXQuoteReceivedEvent.OutputTuple,
      DEXQuoteReceivedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SwapExecuted(address,address,uint256,uint256,string,address)": TypedContractEvent<
      SwapExecutedEvent.InputTuple,
      SwapExecutedEvent.OutputTuple,
      SwapExecutedEvent.OutputObject
    >;
    SwapExecuted: TypedContractEvent<
      SwapExecutedEvent.InputTuple,
      SwapExecutedEvent.OutputTuple,
      SwapExecutedEvent.OutputObject
    >;
  };
}
