/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace MEVDex {
  export type SwapRequestStruct = {
    tokenIn: AddressLike;
    tokenOut: AddressLike;
    amountIn: BigNumberish;
    minAmountOut: BigNumberish;
    deadline: BigNumberish;
    salt: BytesLike;
    feeBps: BigNumberish;
    slippageBps: BigNumberish;
  };

  export type SwapRequestStructOutput = [
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint,
    minAmountOut: bigint,
    deadline: bigint,
    salt: string,
    feeBps: bigint,
    slippageBps: bigint
  ] & {
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    minAmountOut: bigint;
    deadline: bigint;
    salt: string;
    feeBps: bigint;
    slippageBps: bigint;
  };
}

export interface MEVDexInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "COMMITMENT_TIMEOUT"
      | "MAX_FEE_BPS"
      | "MAX_SLIPPAGE_BPS"
      | "MIN_FEE_BPS"
      | "MIN_SLIPPAGE_BPS"
      | "calculateCommitment"
      | "cancelCommitment"
      | "commitSwap"
      | "commitments"
      | "defaultFeeBps"
      | "defaultSlippageBps"
      | "dexAggregator"
      | "emergencyWithdraw"
      | "getCommitment"
      | "getDefaultParameters"
      | "getParameterLimits"
      | "isCommitmentValid"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "revealAndSwap"
      | "setDefaultFeeBps"
      | "setDefaultSlippageBps"
      | "setDexAggregator"
      | "transferOwnership"
      | "unpause"
      | "userCommitmentCount"
      | "withdrawETH"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "Paused"
      | "SwapCommitted"
      | "SwapExecuted"
      | "SwapRevealed"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "COMMITMENT_TIMEOUT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FEE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SLIPPAGE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_FEE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_SLIPPAGE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateCommitment",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelCommitment",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "commitSwap",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "commitments",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultSlippageBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dexAggregator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommitment",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getParameterLimits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCommitmentValid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealAndSwap",
    values: [MEVDex.SwapRequestStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultFeeBps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultSlippageBps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDexAggregator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userCommitmentCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "COMMITMENT_TIMEOUT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FEE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_SLIPPAGE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_FEE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_SLIPPAGE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "commitSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultSlippageBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dexAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParameterLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCommitmentValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealAndSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultSlippageBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDexAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userCommitmentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapCommittedEvent {
  export type InputTuple = [
    commitment: BytesLike,
    user: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    commitment: string,
    user: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    commitment: string;
    user: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapExecutedEvent {
  export type InputTuple = [
    commitment: BytesLike,
    user: AddressLike,
    tokenIn: AddressLike,
    tokenOut: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    commitment: string,
    user: string,
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint,
    amountOut: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    commitment: string;
    user: string;
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    amountOut: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapRevealedEvent {
  export type InputTuple = [
    commitment: BytesLike,
    user: AddressLike,
    tokenIn: AddressLike,
    tokenOut: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    commitment: string,
    user: string,
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint,
    amountOut: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    commitment: string;
    user: string;
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    amountOut: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MEVDex extends BaseContract {
  connect(runner?: ContractRunner | null): MEVDex;
  waitForDeployment(): Promise<this>;

  interface: MEVDexInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  COMMITMENT_TIMEOUT: TypedContractMethod<[], [bigint], "view">;

  MAX_FEE_BPS: TypedContractMethod<[], [bigint], "view">;

  MAX_SLIPPAGE_BPS: TypedContractMethod<[], [bigint], "view">;

  MIN_FEE_BPS: TypedContractMethod<[], [bigint], "view">;

  MIN_SLIPPAGE_BPS: TypedContractMethod<[], [bigint], "view">;

  calculateCommitment: TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      deadline: BigNumberish,
      salt: BytesLike,
      feeBps: BigNumberish,
      slippageBps: BigNumberish,
      user: AddressLike
    ],
    [string],
    "view"
  >;

  cancelCommitment: TypedContractMethod<
    [commitment: BytesLike],
    [void],
    "nonpayable"
  >;

  commitSwap: TypedContractMethod<[commitment: BytesLike], [void], "payable">;

  commitments: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, boolean, boolean] & {
        user: string;
        timestamp: bigint;
        revealed: boolean;
        executed: boolean;
      }
    ],
    "view"
  >;

  defaultFeeBps: TypedContractMethod<[], [bigint], "view">;

  defaultSlippageBps: TypedContractMethod<[], [bigint], "view">;

  dexAggregator: TypedContractMethod<[], [string], "view">;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;

  getCommitment: TypedContractMethod<
    [commitment: BytesLike],
    [
      [string, bigint, boolean, boolean] & {
        user: string;
        timestamp: bigint;
        revealed: boolean;
        executed: boolean;
      }
    ],
    "view"
  >;

  getDefaultParameters: TypedContractMethod<
    [],
    [[bigint, bigint] & { fee: bigint; slippage: bigint }],
    "view"
  >;

  getParameterLimits: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        minFee: bigint;
        maxFee: bigint;
        minSlippage: bigint;
        maxSlippage: bigint;
      }
    ],
    "view"
  >;

  isCommitmentValid: TypedContractMethod<
    [commitment: BytesLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revealAndSwap: TypedContractMethod<
    [swapRequest: MEVDex.SwapRequestStruct, commitment: BytesLike],
    [void],
    "nonpayable"
  >;

  setDefaultFeeBps: TypedContractMethod<
    [_defaultFeeBps: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDefaultSlippageBps: TypedContractMethod<
    [_defaultSlippageBps: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDexAggregator: TypedContractMethod<
    [_dexAggregator: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  userCommitmentCount: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  withdrawETH: TypedContractMethod<[], [void], "nonpayable">;

  withdrawFees: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "COMMITMENT_TIMEOUT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_FEE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_SLIPPAGE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_FEE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_SLIPPAGE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateCommitment"
  ): TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      deadline: BigNumberish,
      salt: BytesLike,
      feeBps: BigNumberish,
      slippageBps: BigNumberish,
      user: AddressLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelCommitment"
  ): TypedContractMethod<[commitment: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "commitSwap"
  ): TypedContractMethod<[commitment: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "commitments"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, boolean, boolean] & {
        user: string;
        timestamp: bigint;
        revealed: boolean;
        executed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "defaultFeeBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "defaultSlippageBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dexAggregator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCommitment"
  ): TypedContractMethod<
    [commitment: BytesLike],
    [
      [string, bigint, boolean, boolean] & {
        user: string;
        timestamp: bigint;
        revealed: boolean;
        executed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDefaultParameters"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { fee: bigint; slippage: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getParameterLimits"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        minFee: bigint;
        maxFee: bigint;
        minSlippage: bigint;
        maxSlippage: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isCommitmentValid"
  ): TypedContractMethod<[commitment: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revealAndSwap"
  ): TypedContractMethod<
    [swapRequest: MEVDex.SwapRequestStruct, commitment: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultFeeBps"
  ): TypedContractMethod<[_defaultFeeBps: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDefaultSlippageBps"
  ): TypedContractMethod<
    [_defaultSlippageBps: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDexAggregator"
  ): TypedContractMethod<[_dexAggregator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userCommitmentCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "SwapCommitted"
  ): TypedContractEvent<
    SwapCommittedEvent.InputTuple,
    SwapCommittedEvent.OutputTuple,
    SwapCommittedEvent.OutputObject
  >;
  getEvent(
    key: "SwapExecuted"
  ): TypedContractEvent<
    SwapExecutedEvent.InputTuple,
    SwapExecutedEvent.OutputTuple,
    SwapExecutedEvent.OutputObject
  >;
  getEvent(
    key: "SwapRevealed"
  ): TypedContractEvent<
    SwapRevealedEvent.InputTuple,
    SwapRevealedEvent.OutputTuple,
    SwapRevealedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "SwapCommitted(bytes32,address,uint256)": TypedContractEvent<
      SwapCommittedEvent.InputTuple,
      SwapCommittedEvent.OutputTuple,
      SwapCommittedEvent.OutputObject
    >;
    SwapCommitted: TypedContractEvent<
      SwapCommittedEvent.InputTuple,
      SwapCommittedEvent.OutputTuple,
      SwapCommittedEvent.OutputObject
    >;

    "SwapExecuted(bytes32,address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      SwapExecutedEvent.InputTuple,
      SwapExecutedEvent.OutputTuple,
      SwapExecutedEvent.OutputObject
    >;
    SwapExecuted: TypedContractEvent<
      SwapExecutedEvent.InputTuple,
      SwapExecutedEvent.OutputTuple,
      SwapExecutedEvent.OutputObject
    >;

    "SwapRevealed(bytes32,address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      SwapRevealedEvent.InputTuple,
      SwapRevealedEvent.OutputTuple,
      SwapRevealedEvent.OutputObject
    >;
    SwapRevealed: TypedContractEvent<
      SwapRevealedEvent.InputTuple,
      SwapRevealedEvent.OutputTuple,
      SwapRevealedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
